ALTER TABLE DW.CONTROL.SOURCESYSTEM DROP COLUMN EKEY,PASSPHARSE;


CREATE OR REPLACE TABLE DW.CONTROL.KEY_STORE (
SOURCESYSTEM VARCHAR(100),
SOURCESYSTEMID ARRAY, 
KEY_VALUE VARCHAR(100),
PASSPHARSE VARCHAR(100),
ADVANCED_ENCRYPTION_STD VARCHAR(100),
VALID_ROLES ARRAY
);

INSERT INTO DW.CONTROL.KEY_STORE SELECT  'GRS_NO',ARRAY_CONSTRUCT(1,2),'RDMLV7TU','1029','AES-GCM',ARRAY_CONSTRUCT('SISEU_MYSECURITAS','SISEU_DATAREADER');

--UPDATE "DW"."CONTROL"."KEY_STORE" SET VALID_ROLES =ARRAY_CONSTRUCT('SISEU_DATAREADER');
--UPDATE "DW"."CONTROL"."KEY_STORE" SET VALID_ROLES =ARRAY_CONSTRUCT('ACCOUNTADMIN','SISEU_DATAREADER');
--ALTER TABLE DW.CONTROL.SOURCESYSTEM DROP COLUMN (EKEY,PASSPHARSE)
--UPDATE  DW.CONTROL.KEY_STORE SET  VALID_ROLES= ARRAY_APPEND(VALID_ROLES, 'ACCOUNTADMIN');


CREATE OR REPLACE SCHEMA DW.SIS;

CREATE OR REPLACE VIEW DW.SIS.GRSNO_GCS_EXPORT_ERP_CALL_OUTS AS
SELECT CASE_NUMBER,
ALARM_NUMBER,
ALARM_CENTER_NAME,
ALARM_CENTER_CONTRACT_NUMBER,
ALARM_TIME,
ALARM_REACH_TIME,
ALARM_TYPE,
ALARM_TYPE_TEXT,
INSERT_DATE,
CHANGE_DATE,
GUARD_SECTION,
MEASURES_CODE,
MEASURES_TEXT,
ALARM_ISSUE_CODE,
ALARM_ISSUE_DESCRIPTION,
TRANSFERRING_TIME,
HANDLE_MANUALLY,
ALARM_CENTER_NUMBER,
ALARM_CENTER_REFERENCE,
ALARM_CENTER_ADDRESS,
ALARM_CENTER_ZIP_CODE,
ALARM_CENTER_LOCATION,
ALARM_CENTER_TELEPHONE_NUMBER,
CUSTOMER_OBJECT,
CUSTOMER_ORGANIZATION_ID,
EXPORTED_TIME_STAMP,
INSERT_USER,
CHANGE_USER,
ROWID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_NUMBER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_NUMBER)
END AS CUSTOMER_NUMBER,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BUILDING_NUMBER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BUILDING_NUMBER)
END AS BUILDING_NUMBER,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BUILDING_NAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BUILDING_NAME)
END AS BUILDING_NAME,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BUILDING_ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BUILDING_ADDRESS)
END AS BUILDING_ADDRESS,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BUILDING_LOCATION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BUILDING_LOCATION)
END AS BUILDING_LOCATION,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BUILDING_SECTION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BUILDING_SECTION)
END AS BUILDING_SECTION,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BUILDING_ZIP_CODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BUILDING_ZIP_CODE)
END AS BUILDING_ZIP_CODE,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(FREE_TEXT_FROM_GUARD,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(FREE_TEXT_FROM_GUARD)
END AS FREE_TEXT_FROM_GUARD,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(FREE_TEXT_FROM_OPERATOR,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(FREE_TEXT_FROM_OPERATOR)
END AS FREE_TEXT_FROM_OPERATOR,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_VAT_NUMBER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_VAT_NUMBER)
END AS CUSTOMER_VAT_NUMBER,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_SOCIAL_SECURITY_NUMBER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_SOCIAL_SECURITY_NUMBER)
END AS CUSTOMER_SOCIAL_SECURITY_NUMBER,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_NAME_1,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_NAME_1)
END AS CUSTOMER_NAME_1,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_NAME_2,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_NAME_2)
END AS CUSTOMER_NAME_2,


CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_ADDRESS)
END AS CUSTOMER_ADDRESS,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_ZIP_CODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_ZIP_CODE)
END AS CUSTOMER_ZIP_CODE,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_LOCATION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_LOCATION)
END AS CUSTOMER_LOCATION,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INVOICE_CUSTOMER_NAME_1,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INVOICE_CUSTOMER_NAME_1)
END AS INVOICE_CUSTOMER_NAME_1,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INVOICE_CUSTOMER_NAME_2,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INVOICE_CUSTOMER_NAME_2)
END AS INVOICE_CUSTOMER_NAME_2,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INVOICE_CUSTOMER_ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INVOICE_CUSTOMER_ADDRESS)
END AS INVOICE_CUSTOMER_ADDRESS,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INVOICE_CUSTOMER_ZIPCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INVOICE_CUSTOMER_ZIPCODE)
END AS INVOICE_CUSTOMER_ZIPCODE,

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INVOICE_CUSTOMER_LOCATION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INVOICE_CUSTOMER_LOCATION)
END AS INVOICE_CUSTOMER_LOCATION,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CALL_OUT_BARCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CALL_OUT_BARCODE)
END AS CALL_OUT_BARCODE,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.GCS_EXPORT_ERP_CALL_OUTS,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_GCS_EXPORT_ERP_CALL_OUT_GUARDS AS 
SELECT BASE_LOCATION_NUMBER, COST_CENTRE, ARRIVAL_TIME, DEPARTURE_TIME, ELAPSED_TIME, GUARD_TYPE, CASE_NUMBER, VISIT_DETAIL, INSERT_USER, INSERT_DATE, CHANGE_USER, CHANGE_DATE, ROWID, ON_WAY_TIME, RETURN_TIME_BACK_TO_OFFICE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(EMPLOYMENT_NUMBER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(EMPLOYMENT_NUMBER)
END AS EMPLOYMENT_NUMBER,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.GCS_EXPORT_ERP_CALL_OUT_GUARDS,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_ALARM AS
SELECT ALARM_ID,
ALARM_NO,
ALARM_GROUP_ID,
ALARM_TYPE_ID,
ALARM_KEY_STORAGE_INCL,
CUST_OBJ_ID,
UNIT_PROD_OBJ_ID,
UNIT_LOC_OBJ_ID,
CENTRAL_UNIT_TYPE,
ALARM_ADM_CENTRAL_ID,
ALARM_DISTRIB_CENTRAL_ID,
INSERT_DATE,
INSERT_USER,
CHANGE_DATE,
CHANGE_USER,
ROWID,
ALARM_PORTABLE_ID,
TURN_OUT_COUNT,
DATEFROM,
DATETO,
ALARM_PORTABLE_ITEM_ID,
APPERANCE_TIME,
APPERANCE_TIME_EXCEPTION,
APPERANCE_TIME_EXCEPTION_START,
APPERANCE_TIME_EXCEPTION_STOP,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NOTES)
END AS NOTES,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.ALARM,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

----------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_ALARM_CODES AS 
SELECT ALARM_CODE_ID, ALARM_CODE_NO, SHORT_DESCRIPTION, DESCRIPTION, INSERT_USER, INSERT_DATE, CHANGE_DATE, CHANGE_USER, ROWID, EXCLUDE_FROM_REPORT, SHOWFORASSIGNMENT, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.ALARM_CODES;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_ALARM_GROUP AS 
SELECT ALARM_GROUP_ID, ALARM_GROUP_NO, DESCRIPTION, INSERT_DATE, CHANGE_DATE, SORT_ORDER, INSERT_USER, CHANGE_USER, ROWID, PORTABLE_ALARM, TRANSFERTOGCS,  
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.ALARM_GROUP;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_ASSIGNMENT_TYPE AS 
SELECT ASSIGNMENT_TYPE_ID, ASSIGNMENT_TYPE_NO, DESCRIPTION, INSERT_DATE, CHANGE_DATE, ALLOW_TO_SPLIT, ALLOW_OUTSIDE_GD, MINUTES_REDUCE_ST, 
MINUTES_REDUCE_END, ALLOW_TO_DISPLACE, MINUTES_ADVANCE, MINUTES_AFTERWARDS, INSERT_USER, CHANGE_USER, ROWID, 
ALLOW_MULTIPLE_ASSIGNM_PER_DAYT, GROUPED_COMMITMENT, GROUPED_COMMITMENT_MEMBER, RAZZIA, SHOW_PO, Y_TYPE, ICON_ID, 
TIME_BANK_NOT_USED, EXCLUDE_FROM_TIME_BANK, INTERNAL, UICOLOR, ODS_SRC_SYSTEM_ID, 
ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.ASSIGNMENT_TYPE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CONTRACT_PART AS 
SELECT CONTRACT_ID, CONTRACT_PART_ID, CONTRACT_PART_NO, CUST_OBJ_ID, CONTRACT_PART_CENTRAL_NO, INSERT_DATE, CHANGE_DATE, 
PRODUCT_ID, INVOICE_ADDR_CODE, INVOICE_TEXT_CODE, TRANSMITTER_NO, PLANNED_PROD_START, TERMINATION_CODE, LATEST_CONTR_CHAN,
CONTR_REG_DATE, VALIDFROM, VALIDTO, PORTF_PROFITC_ID, PORTF_MONTH_INCOME, REGISTRATION_DATE, REGISTERED_BY, LATEST_CHANGE_DATE, 
LATEST_CHANGED_BY, ROWIDMASTER, INSERT_USER, CHANGE_USER, ROWID, MASTER_DATE, CENTRAL_USER, CENTRAL_COMPANY, 
COMMITMENT_INCOME_TYPE, DESCRIPTION, MULTIPLE_ASSIGNMENTS, COMMITMENT_INCOME_MONEY, TIME_BANK,  
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.CONTRACT_PART;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CONTR_PART_VER AS 
SELECT CONTRACT_ID, CONTRACT_PART_ID, VERSION_FROM, PROFITCENTER_ID, INSERT_DATE, CHANGE_DATE, VERSION_TO, MONTHLY_INCOME, CONTR_REG_DATE, INVOICE_STATUS, ALTERATION_TYPE, PRICE_CHANGE_CONST, REGISTRATION_DATE, REGISTERED_BY, LATEST_CHANGE_DATE, LATEST_CHANGED_BY, ROWID, DAYTYPE_MINUTES, DATE_MINUTES, DAYTYPE_CALCULATION_READY, DATE_CALCULATION_READY, MASTER_DATE, CHANGE_TYPE_1, CHANGE_TYPE_2, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INSERT_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INSERT_USER)
END AS INSERT_USER,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CHANGE_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CHANGE_USER)
END AS CHANGE_USER, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.CONTR_PART_VER,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CONTRACT_TYPE AS 
SELECT CONTRACT_TYPE_ID, DESCRIPTION, INSERT_DATE, CHANGE_DATE, CONTRACT_TYPE_NO, ROWIDMASTER, INSERT_USER, CHANGE_USER, ROWID, ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.CONTRACT_TYPE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CUST_CUST_OBJECT AS 
SELECT DATEFROM, DATETO, CUST_OBJ_ID, CUSTOMER_ID, INSERT_DATE, CHANGE_DATE, INSERT_USER, CHANGE_USER, ROWID, MASTER_DATE,
 ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.CUST_CUST_OBJECT;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_GD AS 
SELECT GD_ID, GD_NO, INSERT_DATE, CHANGE_DATE, PROFITCENTER_ID, GD_TYPE_ID, GD_KNOWREQ, DATEFROM, DATETO, ROWID, PE_PROFITC, PE_NO, REPORT_MARK_FOLDER_ID, EXPORT_TO_GMP, VISIBLE_IN_153, EXCLUDE_EMPTY_GD_SHIFT, CALENDAR_TEMPLATE_ID, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NAME)
END AS NAME, 

CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTCODE)
END AS POSTCODE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ADDRESS)
END AS ADDRESS,  
 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTADDRESS)
END AS POSTADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(REF_PERSON,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(REF_PERSON)
END AS REF_PERSON, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEPHONE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEPHONE)
END AS TELEPHONE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEFAX,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEFAX)
END AS TELEFAX,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEMODEM,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEMODEM)
END AS TELEMODEM,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS_EXTRA,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS_EXTRA)
END AS POSTDELIVERY_ADDRESS_EXTRA,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(GEOLOCATION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(GEOLOCATION)
END AS GEOLOCATION,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INSERT_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INSERT_USER)
END AS INSERT_USER,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CHANGE_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CHANGE_USER)
END AS CHANGE_USER,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(GEO_LAT,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(GEO_LAT)
END AS LATITUDE,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(GEO_LONG,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(GEO_LONG)
END AS LONGITUDE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(STARTLOCATION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(STARTLOCATION)
END AS STARTLOCATION,

 ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.GD,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_LOCATION_OBJECT AS 
SELECT PROD_OBJ_ID, LOC_OBJ_ID, DESCRIPTION, INSERT_DATE, CHANGE_DATE, INSERT_USER, CHANGE_USER, ROWID, VALIDFROM, VALIDTO, LOCATION_OBJ_ID,  ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.LOCATION_OBJECT;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_PRODUCTION_OBJECT AS 
SELECT PROD_OBJ_ID, DESCRIPTION, INSERT_DATE, CHANGE_DATE, INSERT_USER, CHANGE_USER, ROWID, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PROD_OBJ_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PROD_OBJ_NO)
END AS PROD_OBJ_NO, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS)
END AS POSTDELIVERY_ADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTCODE)
END AS POSTCODE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ADDRESS)
END AS ADDRESS,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ADDRESS_2,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ADDRESS_2)
END AS ADDRESS_2,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTADDRESS)
END AS POSTADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(REF_PERSON,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(REF_PERSON)
END AS REF_PERSON, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEPHONE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEPHONE)
END AS TELEPHONE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEFAX,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEFAX)
END AS TELEFAX,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEMODEM,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEMODEM)
END AS TELEMODEM,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS_EXTRA,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS_EXTRA)
END AS POSTDELIVERY_ADDRESS_EXTRA,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(XPOS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(XPOS)
END AS XPOS,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(YPOS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(YPOS)
END AS YPOS,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.PRODUCTION_OBJECT,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_PROFITCENTER AS 
SELECT PROFITCENTER_ID, PROFITCENTER_NO, INSERT_DATE, CHANGE_DATE, DESCRIPTION, DATEFROM, DATETO, INSERT_USER, CHANGE_USER, ROWID, POSITION_TYPE_REF, VISIBLE, CO_OWNERSHIP_ALLOWED, KPISTARTDATE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(RESPONSIBLE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(RESPONSIBLE)
END AS RESPONSIBLE, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.PROFITCENTER,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_REPORT_MARK AS 
SELECT REPORT_MARK_ID, REPORT_LABEL, INSERT_DATE, CHANGE_DATE, REP_MARK_TYPE_ID, BARCODE, ACTIVITY_CODE, TIMELIMIT_CODE, INSERT_USER, CHANGE_USER, ROWID, REPORT_MARK_VERSION, RISK_LEVEL, SYSTEM, REPORT_FOLDER_LABEL, STATISTICS_MEMBER, CODE, REPORT_LABEL_2, REPORT_MARK_SET_ONLY, SBA, REPORT_LABEL_GCS_SYNC, ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.REPORT_MARK;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_GRS_ADDONINFO AS 
SELECT CASE_NUMBER, CUST_OBJ_NO, GRSR_EVENT_ID, INSERT_DATE, CHANGE_DATE, ALARM_NO, ALARM_GROUP_NO, ALARM_GROUP_NAME, ALARM_PORTABLE_NO, ALARAM_PORTABLE_NAME, CUST_OBJ_NO_ALT, ALARM_ID, ALARM_TIME, INSERT_USER, CHANGE_USER, ROWID, ID, SFU_EVENT_ID, TRANSFERRING_TIME,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_NO)
END AS CUSTOMER_NO,
 ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.GRS_ADDONINFO,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_COMMIT_LOC_OBJECT AS
SELECT COMMITMENT_ID, PROD_OBJ_ID, LOC_OBJ_ID, INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.COMMIT_LOC_OBJECT;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_COMMITMENT AS
SELECT COMMITMENT_ID, DESCRIPTION, INSTRUCTION, DATETO, INSERT_DATE, CHANGE_DATE, ASSIGNMENT_TYPE_NO, ASSIGNMENT_TYPE_ID, CONTRACT_ID, CONTRACT_PART_ID, ROAD_TIME_FROM_GD, DATEFROM, VERSION_FROM, VERSION_TO, DISTRIBUTION_TYPE, RANDOM_COUNT, RANDOM_PERIOD, RANDOM_PERIOD_TYPE, RANDOM_MIN_DIST, PERIOD_LENGTH, PERIOD_TOTALLENGTH, PERIOD_START, ABS_COUNT, INSERT_USER, CHANGE_USER, ROWID, PRIORITY_TYPE, INCOME_TYPE, EXECUTE_TYPE, MULTIPLE_EXECUTION, SEASON_TYPE, PROCESS_TYPE, INCOME, ON_REPORT_REPLACE_CO_WITH_PO, RED, ENABLE_MONITORING, ENABLE_PRE_START_MONITORING, ENABLE_POST_START_MONITORING, PRE_START, POST_START, ENABLE_PRE_STOP_MONITORING, ENABLE_POST_STOP_MONITORING, PRE_STOP, POST_STOP, ENABLE_PERIOD_MONITORING, MONITORING_PERIOD, ENABLE_NOTIFY, PRE_TRANSPORT_NOTIFY_TIME, NOTIFY_PERIOD, ENABLE_NOTIFY_TRANSPORT, HIDDEN, ALLOWFINGERSCANNING, EXTRAORDER_ID, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.COMMITMENT;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CONTRACT AS 
SELECT CONTRACT_ID, CONTRACT_NO, CUSTOMER_ID,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CONTACT,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CONTACT)
END AS CONTACT, 
INVOICE_LATEST, INVOICED_TO, VALIDTO, MONTHLY_INC_ALL, INSERT_DATE, CHANGE_DATE, VALIDFROM, RENEWED, TERMINATE, CANCELLED, CONTRACT_TYPE_ID, TERM_OF_NOTICE, CANCEL_TYPE_ID, CANCEL_GROUND_ID, INVOICE_TYPE_ID, PAYMENT_MONTH, JOINT_INVOICE, JOINT_INVOICE_SORT, INVOICE_FEE_ID, INVOICE_ACCEPT, TERMS_OF_PAYMNT_ID, MANUAL_ENVELOPE, MONTHLY_INC_CONT, CUSTOMER_REF, INVOICE_TEXT_CODE, SALESMAN_ID, ENGINEER_ID, SIGNED_CONTRACT, PRICE_CHANGE_PERC, PRICE_CHANGE_ID, TOTAL_INV, TOTAL_INV_PREV_Y, TOTAL_INV_THIS_Y, LATEST_INVOICE_ID, LATEST_EXTRA_ID, NEW_CONTRACT, UPDATE_CODE, CANCELLED_BY, PRICE_CHANGE_EARL, REPLACE_OTHER_CONT, REGISTRATION_DATE, REGISTERED_BY, LATEST_CHANGE_DATE, LATEST_CHANGED_BY, ROWIDMASTER, INSERT_USER, CHANGE_USER, ROWID, CONTRACT_CONDITION_ID, PROFITCENTER_ID, MASTER_DATE, CENTRAL_VALIDTO, SYSTEM_CONTRACT_TYPE_ID, CENTRAL_USER, CENTRAL_COMPANY, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.CONTRACT,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CUSTOMER_OBJECT AS 
SELECT  CUST_OBJ_ID, CUST_OBJ_NO_ALT, TERMINATE_DATE, INSERT_DATE, CHANGE_DATE, MARKET_ID, INSERT_USER, CHANGE_USER, ROWID,
MASTER_DATE, CITY_ID, CITY_PART_ID, BLOCK_ID, INVOICECUSTOMER_NO, CUSTOMER_OBJECT_TYPE, ADDRESSCODE, PROFITCENTER_NO, CENTRAL_USER, CENTRAL_COMPANY, MARKET_ITEM_ID, PROFITCENTER_ID, PROTECTED, ENABLE_PROD_OBJ_POSITION, VISION_ID, ALLOWCAMERA, CALENDAR_TEMPLATE_ID, USECUSTOMERADDRESS, XDE_SUBCONTRACTOR_CCT_NO, XDE_EXTRA_INFORMATION, XDE_PRODUCTS, XDE_IS_EXTERNAL, ISBLACKLISTED, BLACKLISTCOMMENT, GLOBAL_MASTER_NO, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUST_OBJ_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUST_OBJ_NO)
END AS CUST_OBJ_NO,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(GEO_LAT,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(GEO_LAT)
END AS LATITUDE,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(GEO_LONG,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(GEO_LONG)
END AS LONGITUDE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NAME)
END AS NAME, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS)
END AS POSTDELIVERY_ADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTCODE)
END AS POSTCODE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ADDRESS)
END AS ADDRESS,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ADDRESS_2,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ADDRESS_2)
END AS ADDRESS_2,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTADDRESS)
END AS POSTADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ASSIGNMENTGEOLOCATION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ASSIGNMENTGEOLOCATION)
END AS ASSIGNMENTGEOLOCATION, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(BLOCK,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(BLOCK)
END AS BLOCK, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(DISTRICT,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(DISTRICT)
END AS DISTRICT, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(REF_PERSON,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(REF_PERSON)
END AS REF_PERSON, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEPHONE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEPHONE)
END AS TELEPHONE,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEFAX,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEFAX)
END AS TELEFAX,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEMODEM,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEMODEM)
END AS TELEMODEM,  
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS_EXTRA,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS_EXTRA)
END AS POSTDELIVERY_ADDRESS_EXTRA, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(XPOS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(XPOS)
END AS XPOS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(YPOS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(YPOS)
END AS YPOS,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NOTES)
END AS NOTES, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ASSIGNMENTPOSTCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ASSIGNMENTPOSTCODE)
END AS ASSIGNMENTPOSTCODE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(XDE_CUSTOMER_NAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(XDE_CUSTOMER_NAME)
END AS XDE_CUSTOMER_NAME, ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.CUSTOMER_OBJECT,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_CUSTOMER AS 
SELECT CUSTOMER_ID, CUSTOMER_TYPE_ID, VALIDTO, INSERT_DATE, CHANGE_DATE, ORGANIZATION_NO, ROWIDMASTER, INSERT_USER, CHANGE_USER, ROWID, MASTER_DATE, SYSTEM_CUSTOMER_TYPE_ID, SYSTEM_PROFITCENTER_ID, CENTRAL_COMPANY, CONFIRM_QUESTION_LIMIT, GRSRWENABLE, REQUIRESKAMPERMISSION, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CUSTOMER_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CUSTOMER_NO)
END AS CUSTOMER_NO,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NAME_SEARCH,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NAME_SEARCH)
END AS NAME_SEARCH,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NAME_1,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NAME_1)
END AS NAME_1,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NAME_2,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NAME_2)
END AS NAME_2,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(ADDRESS)
END AS ADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTCODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTCODE)
END AS POSTCODE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTADDRESS)
END AS POSTADDRESS,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS)
END AS POSTDELIVERY_ADDRESS, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSTDELIVERY_ADDRESS_EXTRA,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSTDELIVERY_ADDRESS_EXTRA)
END AS POSTDELIVERY_ADDRESS_EXTRA,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEPHONE_1,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEPHONE_1)
END AS TELEPHONE_1, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEPHONE_2,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEPHONE_2)
END AS TELEPHONE_2, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(TELEFAX,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(TELEFAX)
END AS TELEFAX, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(MARKET_CODE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(MARKET_CODE)
END AS MARKET_CODE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CENTRAL_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CENTRAL_USER)
END AS CENTRAL_USER, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.CUSTOMER,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_LOCATION_MARK AS 
SELECT LOCATION_MARK_ID, BARCODE, POSITION_GUARD_INFO, INSERT_DATE, CHANGE_DATE, PROD_OBJ_ID, LOC_OBJ_ID, LOC_MARK_TYPE_ID, ACTION, ORDER_NO, ORDER_NO_EXTRA, INSERT_USER, CHANGE_USER, ROWID, VALIDTO, VALIDFROM, LOC_MARK_SERVICE_NO, LOC_MARK_SERVICE_LOCATION, LOC_MARK_SERVICE_INTERVAL_ID, LOC_MARK_SERVICE_EXT_INTERVAL_ID, LOC_MARK_SERVICE_TYPE_ID, LOC_MARK_SERVICE_TYPE_ITEM_ID, LOC_MARK_SERVICE_TYPE_ITEM_2_ID, LOC_MARK_SERVICE_YEAR, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSITION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSITION)
END AS POSITION, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.LOCATION_MARK,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_PROD_CUST_OBJECT AS
SELECT PROD_OBJ_ID, CUST_OBJ_ID, DATEFROM, DATETO, INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID,
 ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.PROD_CUST_OBJECT;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_SFU_COMMITMENTPERFORMED AS
SELECT COMMITMENT_ID, DATEPERFORMED, GD_ID, GD_STARTDATE, EMPLOYEE_ID, CUST_OBJ_ID, STARTDATETIME, STOPDATATIME, LOGG_ID, NOREPORTS, NOATTACHMENTS, INSERT_USER, INSERT_DATE, CHANGE_USER, CHANGE_DATE, ROWID, MANUALREGISTRATIONDATETIME, START_TRANS_ID, STOP_TRANS_ID, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.SFU_COMMITMENTPERFORMED;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_SFU_COMMITMENTPERFORMEDEXTRAVISITS AS
SELECT SFU_COMMITMENTPERFORMEDEXTRAVISITS_ID, COMMITMENT_ID, DATEPERFORMED, GD_ID, GD_STARTDATE, EMPLOYEE_ID, CUST_OBJ_ID, STARTDATETIME, STOPDATATIME, LOGG_ID, NOREPORTS, NOATTACHMENTS, INSERT_USER, INSERT_DATE, CHANGE_USER, CHANGE_DATE, ROWID, MANUALREGISTRATIONDATETIME, START_TRANS_ID, STOP_TRANS_ID, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.SFU_COMMITMENTPERFORMEDEXTRAVISITS;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_REPORT_MARK_CULTURE AS 
SELECT REPORT_MARK_ID, CULTURE_ID, REPORT_LABEL, INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY,  ODS_MODIFIEDBY,  ODS_MODIFIEDBY_TIMESTAMP,  ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.REPORT_MARK_CULTURE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_LOC_MARK_REPORT AS 
SELECT LOCATION_MARK_ID, REPORT_MARK_ID, INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID, SORT_ORDER, 
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.LOC_MARK_REPORT;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_PROCESSED_TRANSACTIONS AS 
SELECT LOGG_ID, TRANS_ID, SUB_ID, GD_ID, PROD_OBJ_ID, LOC_OBJ_ID, MULTIPLICATION_FACTOR, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(REPORT_NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(REPORT_NOTES)
END AS REPORT_NOTES, 
COMMITMENT_ID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(POSITION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(POSITION)
END AS POSITION,INSERT_DATE,CHANGE_DATE, BARCODE_DATE, BARCODE_TIME,BARCODE_NO,BARCODE_GROUP, 
BARCODE_TYPE, LOC_MARK_TYPE, REQUIRED, EMPLOYEE_ID, VALID_ASSOCIATION,
DAY_T_ID, VERSION_FROM, ASSIGNM_TIMEFROM,
CE_VALID_ASSOCIATION,CE_COMMITMENT_ID,CE_EXCEPTION,CE_DAY_T_ID,CE_DATEFROM,CE_TIMEFROM,
REQ_CORRECTION_TYPE,ERROR_FLAG, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NOTES)
END AS NOTES,
ASSOCIATION_NORMAL,ASSOCIATION_CE,LOCATION_MARK_ID,ACTION,INSERT_USER,CHANGE_USER,ROWID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(EMPLOYEE_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(EMPLOYEE_NO)
END AS EMPLOYEE_NO,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(FIRSTNAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(FIRSTNAME)
END AS FIRSTNAME,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(LASTNAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(LASTNAME)
END AS LASTNAME,
TIME_CONSUMPTION,ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS,
  DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_TEMP_TRANSACTIONS AS 
SELECT LOGG_ID, TRANS_ID, BARCODE_TIME, BARCODE_NO,BARCODE_GROUP, INSERT_DATE,INSERT_USER, CHANGE_DATE,CHANGE_USER,ROWID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NOTES)
END AS NOTES, 
ADJUSTED_GD_ID,ADJUSTED_EMPLOYEE_ID,MUASSIGNMENT_ID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(REPORT_NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(REPORT_NOTES)
END AS REPORT_NOTES, 
MULTIPLICATION_FACTOR,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(LATITUDE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(LATITUDE)
END AS LATITUDE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(LONGITUDE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(LONGITUDE)
END AS LONGITUDE,
ASSIGNMENTPLANNEDID, GPSTIMESTAMP,  IS_FINGERSCANNED, ODS_SRC_SYSTEM_ID, 
ODS_CREATEDBY,  ODS_MODIFIEDBY,  ODS_MODIFIEDBY_TIMESTAMP,  ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.TEMP_TRANSACTIONS,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_USERS AS 
SELECT USER_ID, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(USER_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(USER_NO)
END AS USER_NO,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(USER_NAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(USER_NAME)
END AS USER_NAME,
INSERT_DATE,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(INSERT_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(INSERT_USER)
END AS INSERT_USER,
CHANGE_DATE,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(CHANGE_USER,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(CHANGE_USER)
END AS CHANGE_USER,
ROWID, VALIDFROM, VALIDTO, ONLINEUSER, CULTURE_ID, SUPERUSER, 
ODS_SRC_SYSTEM_ID,  ODS_CREATEDBY,  ODS_MODIFIEDBY,  ODS_MODIFIEDBY_TIMESTAMP,  ODS_CREATEDBY_TIMESTAMP 
FROM ODS_GRS_NO.DBO.USERS, 
DW.CONTROL.KEY_STORE KS 
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

-----3 My Securitas TABLE----------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_TEMP_TRANSACTIONS_ATTACHMENT AS 
SELECT TEMP_TRANSACTIONS_ATTACHMENT_ID, STATISTICSATTACHMENT_ID, LOGG_ID, TRANS_ID, ATTACHMENT,
CHECKSUM, MIMETYPE, INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID, ATTACHMENT_BASESTR
GCS_IMPORTTRANSACTIONSFORMRESPONSE_ID, ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.TEMP_TRANSACTIONS_ATTACHMENT,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

-------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_TEMP_TRANSACTIONS_ATTACHMENT_CULTURE AS 
SELECT TEMP_TRANSACTIONS_ATTACHMENT_CULTURE_ID,TEMP_TRANSACTIONS_ATTACHMENT_ID,
ATTACHMENT, MIMETYPE, CULTURE_ID, 
INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID, ATTACHMENT_BASESTR,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.TEMP_TRANSACTIONS_ATTACHMENT_CULTURE,
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

-------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_LOC_MARK_TYPE AS
SELECT LOC_MARK_TYPE_ID , FORCING, COLOUR, NAME, DESCRIPTION, INSERT_DATE, INSERT_USER, CHANGE_DATE, CHANGE_USER, ROWID, RGB_COLOUR, ODS_SRC_SYSTEM_ID, ODS_CREATEDBY, ODS_MODIFIEDBY, ODS_MODIFIEDBY_TIMESTAMP, ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.LOC_MARK_TYPE;


-------- 5 ADDITIONAL VIEW --------------------

--CREATE VIEW [DBO].[XPROCESSED_BARCODES]
CREATE OR REPLACE VIEW DW.SIS.GRSNO_XPROCESSED_BARCODES AS 

SELECT PT.LOGG_ID, PT.TRANS_ID,PT.SUB_ID, PT.GD_ID, PT.PROD_OBJ_ID, PT.LOC_OBJ_ID, PT.MULTIPLICATION_FACTOR, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.REPORT_NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.REPORT_NOTES)
END AS REPORT_NOTES, 
PT.COMMITMENT_ID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.POSITION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.POSITION)
END AS POSITION,PT.INSERT_DATE,PT.CHANGE_DATE, PT.BARCODE_DATE, PT.BARCODE_TIME,PT.BARCODE_NO,PT.BARCODE_GROUP, 
PT.BARCODE_TYPE, PT.LOC_MARK_TYPE, PT.REQUIRED, PT.EMPLOYEE_ID, PT.VALID_ASSOCIATION,
PT.DAY_T_ID, PT.VERSION_FROM, PT.ASSIGNM_TIMEFROM,
PT.CE_VALID_ASSOCIATION,PT.CE_COMMITMENT_ID,PT.CE_EXCEPTION,PT.CE_DAY_T_ID,PT.CE_DATEFROM,PT.CE_TIMEFROM,
PT.REQ_CORRECTION_TYPE,PT.ERROR_FLAG, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.NOTES)
END AS NOTES,
PT.ASSOCIATION_NORMAL,PT.ASSOCIATION_CE,PT.LOCATION_MARK_ID,PT.ACTION,PT.INSERT_USER,PT.CHANGE_USER,PT.ROWID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.EMPLOYEE_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.EMPLOYEE_NO)
END AS EMPLOYEE_NO,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.FIRSTNAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.FIRSTNAME)
END AS FIRSTNAME,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.LASTNAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.LASTNAME)
END AS LASTNAME,
PT.TIME_CONSUMPTION,PT.ODS_SRC_SYSTEM_ID, PT.ODS_CREATEDBY, PT.ODS_MODIFIEDBY, PT.ODS_MODIFIEDBY_TIMESTAMP, PT.ODS_CREATEDBY_TIMESTAMP







FROM  ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT
JOIN 
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(PT.ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE


AND  (BARCODE_TYPE <> 2) OR 

    (BARCODE_TYPE = 2) AND (
		EXISTS ( -- PRECISERING MEN INGA HSNDELSE, STGSRD ETC
        	SELECT *    
      		FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      		WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           		PT2.TRANS_ID = PT.TRANS_ID AND 
           		PT2.SUB_ID = PT.SUB_ID AND 
           		PT2.BARCODE_NO = RM.BARCODE AND 
           		RM.REP_MARK_TYPE_ID BETWEEN 71 AND 80) AND NOT EXISTS
        	(SELECT *
      			FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      			WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           			((PT2.TRANS_ID = PT.TRANS_ID  AND 
           			PT2.SUB_ID = 0) OR
           			(PT2.TRANS_ID = PT.TRANS_ID) AND 
           			(PT2.SUB_ID = PT.SUB_ID )) AND 
           			PT2.BARCODE_NO = RM.BARCODE AND 
           			(RM.REP_MARK_TYPE_ID BETWEEN 71 AND 80 OR
           			RM.REP_MARK_TYPE_ID BETWEEN 31 AND 70 OR
           			RM.REP_MARK_TYPE_ID BETWEEN 91 AND 99)) 
		OR
		EXISTS ( -- KOMPONENT MEN INGA ANDRA
        	SELECT *    
      		FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      		WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           		PT2.TRANS_ID = PT.TRANS_ID AND 
           		PT2.SUB_ID = PT.SUB_ID AND 
           		PT2.BARCODE_NO = RM.BARCODE AND 
           		RM.REP_MARK_TYPE_ID BETWEEN 11 AND 30) AND NOT EXISTS
        	(SELECT *
      			FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      			WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           			((PT2.TRANS_ID = PT.TRANS_ID  AND 
           			PT2.SUB_ID = 0) OR
           			(PT2.TRANS_ID = PT.TRANS_ID) AND 
           			(PT2.SUB_ID = PT.SUB_ID )) AND 
           			PT2.BARCODE_NO = RM.BARCODE AND 
           			(RM.REP_MARK_TYPE_ID BETWEEN 31 AND 99)) 
		OR
		EXISTS ( -- HSNDELSE MEN INTE STGSRD ETC
        	SELECT *    
      		FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      		WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           		PT2.TRANS_ID = PT.TRANS_ID AND 
           		PT2.SUB_ID = PT.SUB_ID AND 
           		PT2.BARCODE_NO = RM.BARCODE AND 
           		RM.REP_MARK_TYPE_ID BETWEEN 31 AND 50) AND NOT EXISTS
        	(SELECT *
      			FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      			WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           			((PT2.TRANS_ID = PT.TRANS_ID  AND 
           			PT2.SUB_ID = 0) OR
           			(PT2.TRANS_ID = PT.TRANS_ID) AND 
           			(PT2.SUB_ID = PT.SUB_ID )) AND 
           			PT2.BARCODE_NO = RM.BARCODE AND 
           			(RM.REP_MARK_TYPE_ID BETWEEN 51 AND 70 OR
           			RM.REP_MARK_TYPE_ID BETWEEN 91 AND 99)) 
		OR
		EXISTS ( -- +TGSRD MEN INTE ÅTGÄRD,  SIGNATUR ETC
        	SELECT *    
      		FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      		WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           		PT2.TRANS_ID = PT.TRANS_ID AND 
           		PT2.SUB_ID = PT.SUB_ID AND 
           		PT2.BARCODE_NO = RM.BARCODE AND 
           		RM.REP_MARK_TYPE_ID BETWEEN 51 AND 70) AND NOT EXISTS
        	(SELECT *
      			FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      			WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           			((PT2.TRANS_ID = PT.TRANS_ID  AND 
           			PT2.SUB_ID = 0) OR
           			(PT2.TRANS_ID = PT.TRANS_ID) AND 
           			(PT2.SUB_ID = PT.SUB_ID )) AND 
           			PT2.BARCODE_NO = RM.BARCODE AND 
           			(RM.REP_MARK_TYPE_ID BETWEEN 51 AND 70 OR
           			RM.REP_MARK_TYPE_ID BETWEEN 91 AND 99)) 

		OR
		EXISTS ( -- SIGNATUR MEN INTE TIDSGRSNS
        	SELECT *    
      		FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      		WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           		PT2.TRANS_ID = PT.TRANS_ID AND 
           		PT2.SUB_ID = PT.SUB_ID AND 
           		PT2.BARCODE_NO = RM.BARCODE AND 
           		RM.REP_MARK_TYPE_ID BETWEEN 96 AND 99) AND NOT EXISTS
        	(SELECT *
      			FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      			WHERE PT2.LOGG_ID = PT.LOGG_ID AND 

           			((PT2.TRANS_ID = PT.TRANS_ID  AND 
           			PT2.SUB_ID = 0) OR
           			(PT2.TRANS_ID = PT.TRANS_ID) AND 
           			(PT2.SUB_ID = PT.SUB_ID )) AND 
           			PT2.BARCODE_NO = RM.BARCODE AND 
           			(RM.REP_MARK_TYPE_ID BETWEEN 91 AND 95)) 

		OR
		EXISTS ( -- TIDSGRSNS
        	SELECT *    
      		FROM ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT2, ODS_GRS_NO.DBO.REPORT_MARK RM
      		WHERE PT2.LOGG_ID = PT.LOGG_ID AND 
           		PT2.TRANS_ID = PT.TRANS_ID AND 
           		PT2.SUB_ID = PT.SUB_ID AND 
           		PT2.BARCODE_NO = RM.BARCODE AND 
           		RM.REP_MARK_TYPE_ID BETWEEN 91 AND 95) 
		)
		

;

--------------------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_XTEMP_TRANSACTIONS_ATTACHMENT AS

SELECT TA.TEMP_TRANSACTIONS_ATTACHMENT_ID, TA.STATISTICSATTACHMENT_ID, TA.LOGG_ID, TA.TRANS_ID
      ,NVL(TAC.ATTACHMENT, TA.ATTACHMENT) AS ATTACHMENT, TA.CHECKSUM, NVL(TAC.MIMETYPE, TA.MIMETYPE) AS MIMETYPE
      ,TA.INSERT_DATE, TA.INSERT_USER, TA.CHANGE_DATE, TA.CHANGE_USER, TA.ROWID
      ,TA.GCS_IMPORTTRANSACTIONSFORMRESPONSE_ID, NVL(TAC.CULTURE_ID,0) AS CULTURE_ID,TA.ATTACHMENT_BASESTR
	  ,TA.ODS_SRC_SYSTEM_ID, TA.ODS_CREATEDBY, TA.ODS_MODIFIEDBY, TA.ODS_MODIFIEDBY_TIMESTAMP, TA.ODS_CREATEDBY_TIMESTAMP
FROM ODS_GRS_NO.DBO.TEMP_TRANSACTIONS_ATTACHMENT TA
JOIN 
	DW.CONTROL.KEY_STORE KS
	LEFT JOIN ODS_GRS_NO.DBO.USERS U ON TO_VARCHAR(DECRYPT(U.USER_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') = RIGHT(CURRENT_USER,LEN(CURRENT_USER)-REGEXP_INSTR(CURRENT_USER, '%\%')) 
	LEFT JOIN ODS_GRS_NO.DBO.TEMP_TRANSACTIONS_ATTACHMENT_CULTURE TAC ON TAC.TEMP_TRANSACTIONS_ATTACHMENT_ID = TA.TEMP_TRANSACTIONS_ATTACHMENT_ID AND TAC.CULTURE_ID = U.CULTURE_ID
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(TA.ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

---------------------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_XTEMP_TRANSACTIONS AS 

 SELECT LOGG_ID, TRANS_ID, BARCODE_TIME, BARCODE_NO,BARCODE_GROUP, INSERT_DATE,INSERT_USER, CHANGE_DATE,CHANGE_USER,ROWID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(NOTES)
END AS NOTES, 
ADJUSTED_GD_ID,ADJUSTED_EMPLOYEE_ID,MUASSIGNMENT_ID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(REPORT_NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(REPORT_NOTES)
END AS REPORT_NOTES, 
MULTIPLICATION_FACTOR,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(LATITUDE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(LATITUDE)
END AS LATITUDE, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(LONGITUDE,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(LONGITUDE)
END AS LONGITUDE,
ASSIGNMENTPLANNEDID, GPSTIMESTAMP,  IS_FINGERSCANNED,
ODS_SRC_SYSTEM_ID, ODS_CREATEDBY,  ODS_MODIFIEDBY,  ODS_MODIFIEDBY_TIMESTAMP,  ODS_CREATEDBY_TIMESTAMP 
FROM  ODS_GRS_NO.DBO.TEMP_TRANSACTIONS
JOIN
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

--------------------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_XREPORT_MARK AS 

SELECT
	RM.REPORT_MARK_ID, RM.REP_MARK_TYPE_ID, RM.BARCODE, NVL(RMC.REPORT_LABEL,RM.REPORT_LABEL) AS REPORT_LABEL
	,RM.ACTIVITY_CODE, RM.TIMELIMIT_CODE, RM.INSERT_DATE
	,RM.INSERT_USER, RM.CHANGE_DATE, RM.CHANGE_USER, RM.ROWID, RM.REPORT_MARK_VERSION
	,RM.RISK_LEVEL, RM.SYSTEM, RM.REPORT_FOLDER_LABEL, RM.STATISTICS_MEMBER, RM.CODE, RM.REPORT_LABEL_2
	,RM.REPORT_MARK_SET_ONLY, RM.SBA, NVL(RMC.CULTURE_ID,0) AS CULTURE_ID
	,RM.ODS_SRC_SYSTEM_ID, RM.ODS_CREATEDBY, RM.ODS_MODIFIEDBY, RM.ODS_MODIFIEDBY_TIMESTAMP, RM.ODS_CREATEDBY_TIMESTAMP
FROM  ODS_GRS_NO.DBO.REPORT_MARK RM
JOIN 
	DW.CONTROL.KEY_STORE KS
	LEFT JOIN ODS_GRS_NO.DBO.USERS U ON  TO_VARCHAR(DECRYPT(U.USER_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') = RIGHT(CURRENT_USER,LEN(CURRENT_USER)-REGEXP_INSTR(CURRENT_USER, '%\%')) 
	LEFT JOIN ODS_GRS_NO.DBO.REPORT_MARK_CULTURE RMC ON RMC.REPORT_MARK_ID = RM.REPORT_MARK_ID AND RMC.CULTURE_ID = U.CULTURE_ID 
	WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(RM.ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE;

--------------------

CREATE OR REPLACE VIEW DW.SIS.GRSNO_XPROCESSED_TRANSACTIONS AS 

SELECT PT.LOGG_ID, PT.TRANS_ID,PT.SUB_ID, PT.GD_ID, PT.PROD_OBJ_ID, PT.LOC_OBJ_ID, PT.MULTIPLICATION_FACTOR, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.REPORT_NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.REPORT_NOTES)
END AS REPORT_NOTES, 
PT.COMMITMENT_ID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.POSITION,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.POSITION)
END AS POSITION,PT.INSERT_DATE,PT.CHANGE_DATE, PT.BARCODE_DATE, PT.BARCODE_TIME,PT.BARCODE_NO,PT.BARCODE_GROUP, 
PT.BARCODE_TYPE, PT.LOC_MARK_TYPE, PT.REQUIRED, PT.EMPLOYEE_ID, PT.VALID_ASSOCIATION,
PT.DAY_T_ID, PT.VERSION_FROM, PT.ASSIGNM_TIMEFROM,
PT.CE_VALID_ASSOCIATION,PT.CE_COMMITMENT_ID,PT.CE_EXCEPTION,PT.CE_DAY_T_ID,PT.CE_DATEFROM,PT.CE_TIMEFROM,
PT.REQ_CORRECTION_TYPE,PT.ERROR_FLAG, 
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.NOTES,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.NOTES)
END AS NOTES,
PT.ASSOCIATION_NORMAL,PT.ASSOCIATION_CE,PT.LOCATION_MARK_ID,PT.ACTION,PT.INSERT_USER,PT.CHANGE_USER,PT.ROWID,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.EMPLOYEE_NO,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.EMPLOYEE_NO)
END AS EMPLOYEE_NO,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.FIRSTNAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.FIRSTNAME)
END AS FIRSTNAME,
CASE 
    WHEN ARRAYS_OVERLAP(ARRAY_CONSTRUCT(CURRENT_ROLE()),VALID_ROLES) THEN TO_VARCHAR(DECRYPT(PT.LASTNAME,KS.PASSPHARSE,KS.KEY_VALUE,KS.ADVANCED_ENCRYPTION_STD),'UTF-8') 
    ELSE TO_VARCHAR(PT.LASTNAME)
END AS LASTNAME,
PT.TIME_CONSUMPTION,PT.ODS_SRC_SYSTEM_ID, PT.ODS_CREATEDBY, PT.ODS_MODIFIEDBY, PT.ODS_MODIFIEDBY_TIMESTAMP, PT.ODS_CREATEDBY_TIMESTAMP

FROM  ODS_GRS_NO.DBO.PROCESSED_TRANSACTIONS PT
JOIN 
DW.CONTROL.KEY_STORE KS
WHERE  ARRAYS_OVERLAP(ARRAY_CONSTRUCT(PT.ODS_SRC_SYSTEM_ID),SOURCESYSTEMID) =TRUE
;


----------------END-------------------------