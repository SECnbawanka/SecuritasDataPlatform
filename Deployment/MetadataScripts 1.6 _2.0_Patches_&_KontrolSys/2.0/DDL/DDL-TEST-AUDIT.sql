GET_DDL('DATABASE','AUDIT')

CREATE OR REPLACE DATABASE AUDIT;


CREATE OR REPLACE SCHEMA AUDIT.BASE;


CREATE OR REPLACE TABLE AUDIT.BASE.DBGRANTS (
	CREATED_ON TIMESTAMP_LTZ(9),
	PRIVILEGE VARCHAR(16777216),
	GRANTED_ON VARCHAR(16777216),
	NAME VARCHAR(16777216),
	GRANTED_TO VARCHAR(16777216),
	GRANTEE_NAME VARCHAR(16777216),
	GRANT_OPTION VARCHAR(16777216),
	GRANTED_BY VARCHAR(16777216),
	REFRESH_DATE TIMESTAMP_LTZ(9) DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE AUDIT.BASE.DBROLES (
	CREATED_ON TIMESTAMP_LTZ(9),
	NAME VARCHAR(16777216),
	IS_DEFAULT VARCHAR(16777216),
	IS_CURRENT VARCHAR(16777216),
	IS_INHERITED VARCHAR(16777216),
	ASSIGNED_TO_USERS NUMBER(38,0),
	GRANTED_TO_ROLES NUMBER(38,0),
	GRANTED_ROLES NUMBER(38,0),
	OWNER VARCHAR(16777216),
	RCOMMENT VARCHAR(16777216),
	REFRESH_DATE TIMESTAMP_LTZ(9) DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE AUDIT.BASE.DBUSERS (
	NAME VARCHAR(16777216),
	CREATED_ON TIMESTAMP_LTZ(9),
	LOGIN_NAME VARCHAR(16777216),
	DISPLAY_NAME VARCHAR(16777216),
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	EMAIL VARCHAR(16777216),
	MINS_TO_UNLOCK VARCHAR(16777216),
	DAYS_TO_EXPIRY VARCHAR(16777216),
	TCOMMENT VARCHAR(16777216),
	DISABLED VARCHAR(16777216),
	MUST_CHANGE_PASSWORD VARCHAR(16777216),
	SNOWFLAKE_LOCK VARCHAR(16777216),
	DEFAULT_WAREHOUSE VARCHAR(16777216),
	DEFAULT_NAMESPACE VARCHAR(16777216),
	DEFAULT_ROLE VARCHAR(16777216),
	EXT_AUTHN_DUO VARCHAR(16777216),
	EXT_AUTHN_UID VARCHAR(16777216),
	MINS_TO_BYPASS_MFA VARCHAR(16777216),
	OWNER VARCHAR(16777216),
	LAST_SUCCESS_LOGIN TIMESTAMP_LTZ(9),
	EXPIRES_AT_TIME TIMESTAMP_LTZ(9),
	LOCKED_UNTIL_TIME TIMESTAMP_LTZ(9),
	HAS_PASSWORD VARCHAR(16777216),
	HAS_RSA_PUBLIC_KEY VARCHAR(16777216),
	REFRESH_DATE TIMESTAMP_LTZ(9) DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE AUDIT.BASE.MATILLION_DETAIL (
	ID VARCHAR(2000) NOT NULL,
	TYPE VARCHAR(2000),
	JOBTIMESTAMP VARCHAR(2000),
	COMPONENTNAME VARCHAR(2000),
	STATE VARCHAR(2000),
	ROWCOUNT VARCHAR(2000),
	STARTTIME VARCHAR(2000),
	ENDTIME VARCHAR(2000),
	MESSAGE VARCHAR(2000),
	AUDIT_SRC_SYSTEM_ID VARCHAR(1024),
	AUDIT_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	AUDIT_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	AUDIT_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	AUDIT_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	constraint PK_MATILLION_DETAIL primary key (ID)
);

CREATE OR REPLACE TABLE AUDIT.BASE.MATILLION_LOG (
	ID NUMBER(38,0) NOT NULL,
	JOB_TYPE VARCHAR(1024),
	GROUPNAME VARCHAR(1024),
	PROJECTNAME VARCHAR(1024),
	VERSIONID NUMBER(38,0),
	VERSIONNAME VARCHAR(1024),
	ENVIRONMENTNAME VARCHAR(1024),
	JOBNAME VARCHAR(1024),
	JOB_STATE VARCHAR(250),
	JOB_ENQUEUEDTIME TIMESTAMP_LTZ(9),
	JOB_STARTTIME TIMESTAMP_LTZ(9),
	JOB_ENDTIME TIMESTAMP_LTZ(9),
	JOB_MESSAGE VARCHAR(1024),
	COMPONENT_TYPE VARCHAR(1024),
	JOB_TIMESTAMP TIMESTAMP_LTZ(9),
	COMPONENT_NAME VARCHAR(1024),
	COMPONENT_STATE VARCHAR(256),
	ROWCOUNT NUMBER(38,0),
	COMPONENT_STARTTIME TIMESTAMP_LTZ(9),
	COMPONENT_ENDTIME TIMESTAMP_LTZ(9),
	COMPONENT_MESSAGE VARCHAR(16777216),
	AUDIT_SRC_SYSTEM_ID VARCHAR(1024),
	AUDIT_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	AUDIT_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	AUDIT_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	AUDIT_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	constraint PK_MATILLION_LOG primary key (ID)
);

CREATE OR REPLACE TABLE AUDIT.BASE.MATILLION_SUMMARY (
	ID VARCHAR(2000) NOT NULL,
	TYPE VARCHAR(2000),
	GROUPNAME VARCHAR(2000),
	PROJECTNAME VARCHAR(2000),
	VERSIONID VARCHAR(2000),
	VERSIONNAME VARCHAR(2000),
	ENVIRONMENTNAME VARCHAR(2000),
	JOBNAME VARCHAR(2000),
	STATE VARCHAR(2000),
	ENQUEUEDTIME VARCHAR(2000),
	STARTTIME VARCHAR(2000),
	ENDTIME VARCHAR(2000),
	MESSAGE VARCHAR(2000),
	AUDIT_SRC_SYSTEM_ID VARCHAR(1024),
	AUDIT_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	AUDIT_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	AUDIT_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	AUDIT_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	constraint PK_MATILLION_SUMMARY primary key (ID)
);

CREATE OR REPLACE TABLE AUDIT.BASE.STG_MATILLION_DETAIL (
	""id"" VARCHAR(2000),
	""type"" VARCHAR(2000),
	""jobTimestamp"" VARCHAR(2000),
	""componentName"" VARCHAR(2000),
	""state"" VARCHAR(2000),
	""rowCount"" VARCHAR(2000),
	""startTime"" VARCHAR(2000),
	""endTime"" VARCHAR(2000),
	""message"" VARCHAR(2000),
	""since"" VARCHAR(2000)
);

CREATE OR REPLACE TABLE AUDIT.BASE.STG_MATILLION_SUMMARY (
	""id"" VARCHAR(2000),
	""type"" VARCHAR(2000),
	""groupName"" VARCHAR(2000),
	""projectName"" VARCHAR(2000),
	""versionID"" VARCHAR(2000),
	""versionName"" VARCHAR(2000),
	""environmentName"" VARCHAR(2000),
	""jobName"" VARCHAR(2000),
	""state"" VARCHAR(2000),
	""enqueuedTime"" VARCHAR(2000),
	""startTime"" VARCHAR(2000),
	""endTime"" VARCHAR(2000),
	""message"" VARCHAR(2000)
);

CREATE OR REPLACE PROCEDURE ""SNAPSHOT_GRANTS""()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS '
	function role_grants() {
		var obj_rs = snowflake.execute({sqlText: ''SELECT NAME FROM DBROLES;''});
		while(obj_rs.next()) {
            snowflake.execute({sqlText: `show grants to role ` + obj_rs.getColumnValue(1) + ` ;` });
			snowflake.execute( {sqlText: `insert into dbgrants select *, CURRENT_TIMESTAMP() from table(result_scan(last_query_id()));`});
			snowflake.execute({sqlText: `show grants on role ` + obj_rs.getColumnValue(1) + ` ;` });
			snowflake.execute( {sqlText: `insert into dbgrants select *, CURRENT_TIMESTAMP() from table(result_scan(last_query_id()));`});
		}
	}// — — — — — — — — — — — — — — — — — — — — — — — —
	function user_grants() {
		var obj_rs = snowflake.execute({sqlText: `SELECT NAME FROM DBUSERS;`});
		while(obj_rs.next()) {
			snowflake.execute({sqlText: `show grants to user ""` + obj_rs.getColumnValue(1) + `"" ;` });
			snowflake.execute( {sqlText:`insert into dbgrants select *,null,null,null,CURRENT_TIMESTAMP() from table(result_scan(last_query_id()));`});
			snowflake.execute({sqlText: `show grants on user ""` + obj_rs.getColumnValue(1) + `"" ;` });
			snowflake.execute( {sqlText:`insert into dbgrants select *,CURRENT_TIMESTAMP() from table(result_scan(last_query_id()));`});
		}
	}// — — — — — — — — — — — — — — — — — — — — — — — —
	var result = ''SUCCESS'';
	try {
		snowflake.execute( {sqlText: ''truncate table DBGRANTS;''} );
		role_grants();
		user_grants();
	} 
	catch (err) {
		result = ''FAILED: Code: '' + err.code + ''\\n State: '' + err.state;
		result += ''\\n Message: '' + err.message;
		result += ''\\nStack Trace:\\n'' + err.stackTraceTxt;
	}
	return result;
';

CREATE OR REPLACE PROCEDURE ""SNAPSHOT_ROLES""()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS '
	var result = ''SUCCESS'';
	try {
		snowflake.execute( {sqlText: ''truncate table DBROLES;''} );
		snowflake.execute( {sqlText: ''show roles;''} );
		var dbroles_tbl_sql = `insert into dbroles select *,CURRENT_TIMESTAMP() from table(result_scan(last_query_id()));`;
		snowflake.execute( {sqlText: dbroles_tbl_sql} );
	} 
	catch (err) {
		result = ''FAILED: Code: '' + err.code + ''\\n State: '' + err.state;result += ''\\n Message: '' + err.message;result += ''\\nStack Trace:\\n'' + err.stackTraceTxt;
	}
	return result;
';

CREATE OR REPLACE PROCEDURE ""SNAPSHOT_USERS""()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS ' 
    var result = ''SUCCESS'';
    try {
        snowflake.execute( {sqlText: ''TRUNCATE TABLE DBUSERS;''} );
        snowflake.execute( {sqlText: ''show users;''} );
        var dbusers_tbl_sql = `insert into dbusers select * ,CURRENT_TIMESTAMP() from table(result_scan(last_query_id()));`;
        snowflake.execute( {sqlText: dbusers_tbl_sql} );
	} 
	catch (err) {
		result = ''FAILED: Code: '' + err.code + ''\\n State: '' + err.state;result += ''\\n Message: '' + err.message;result += ''\\nStack Trace:\\n'' + err.stackTraceTxt;
	}
	return result;
';

CREATE OR REPLACE task TASK_SNAPSHOT_GRANTS
	warehouse=WH_DATA_LOAD
	after AUDIT.BASE.TASK_SNAPSHOT_ROLES
	as call SNAPSHOT_GRANTS();

CREATE OR REPLACE task TASK_SNAPSHOT_ROLES
	warehouse=WH_DATA_LOAD
	after AUDIT.BASE.TASK_SNAPSHOT_USERS
	as call SNAPSHOT_ROLES();

CREATE OR REPLACE task TASK_SNAPSHOT_USERS
	warehouse=WH_DATA_LOAD
	schedule='USING CRON 00 12 * * * America/New_York'
	as call SNAPSHOT_USERS();

CREATE OR REPLACE SCHEMA PUBLIC;
