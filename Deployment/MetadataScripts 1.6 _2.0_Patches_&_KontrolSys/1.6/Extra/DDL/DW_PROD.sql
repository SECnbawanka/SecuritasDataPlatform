CREATE OR REPLACE DATABASE DW;

CREATE OR REPLACE SCHEMA DW.BASE;

CREATE OR REPLACE SCHEMA DW.CONTROL;

CREATE OR REPLACE TABLE DW.CONTROL.COLUMNDETAILS (
	SOURCESYSTEMID NUMBER(38,0) NOT NULL,
	STAGEDATABASENAME VARCHAR(100),
	STAGESCHEMANAME VARCHAR(100),
	STAGETABLENAME VARCHAR(100),
	STAGETABLECOLUMN VARCHAR(100),
	ODSDATABASENAME VARCHAR(100),
	ODSSCHEMANAME VARCHAR(100),
	ODSTABLENAME VARCHAR(100),
	ODSTABLECOLUMN VARCHAR(100),
	ACTIVEFLAG BOOLEAN DEFAULT FALSE,
	ISPSEUDONYMISED BOOLEAN DEFAULT FALSE,
	EXPRESSIONS VARCHAR(100),
	CREATEDUSERID VARCHAR(50) NOT NULL DEFAULT CURRENT_USER(),
	CREATEDDATETIME TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	LASTUPDATEDUSERID VARCHAR(50) NOT NULL DEFAULT CURRENT_USER(),
	LASTUPDATEDDATETIME TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	ISPKEY BOOLEAN,
	DATATYP VARCHAR(100),
	CONSTRAINT PK_COLUMNDETAILS PRIMARY KEY (SOURCESYSTEMID, STAGESCHEMANAME, STAGETABLENAME, STAGETABLECOLUMN)
);
CREATE OR REPLACE TABLE DW.CONTROL.KEYSTORE (
	TABLE_CATALOG VARCHAR(100),
	SOURCESYSTEM VARCHAR(100),
	SOURCESYSTEMID ARRAY,
	KEY_VALUE VARCHAR(100),
	PASSPHRASE VARCHAR(100),
	ADVANCED_ENCRYPTION_STD VARCHAR(100),
	DW_SRC_SYSTEM_ID NUMBER(38,0),
	DW_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	DW_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT PK_KEYSTORE PRIMARY KEY (TABLE_CATALOG)
);
CREATE OR REPLACE TABLE DW.CONTROL.KEY_STORE (
	SOURCESYSTEM VARCHAR(100),
	SOURCESYSTEMID ARRAY,
	KEY_VALUE VARCHAR(100),
	PASSPHARSE VARCHAR(100),
	ADVANCED_ENCRYPTION_STD VARCHAR(100),
	VALID_ROLES ARRAY,
	TABLE_CATALOG VARCHAR(100),
	PASSPHRASE VARCHAR(100),
	DW_SRC_SYSTEM_ID NUMBER(38,0)
);
CREATE OR REPLACE TABLE DW.CONTROL.LOADPROCESS (
	SOURCESYSTEMID NUMBER(38,0) NOT NULL,
	SOURCESCHEMANAME VARCHAR(100) NOT NULL,
	SOURCETABLENAME VARCHAR(100) NOT NULL,
	STAGESCHEMANAME VARCHAR(100),
	STAGETABLENAME VARCHAR(100),
	ODSSCHEMANAME VARCHAR(100),
	ODSTABLENAME VARCHAR(100),
	STAGETYPE VARCHAR(20),
	LOADTYPE VARCHAR(20),
	ACTIVEFLAG BOOLEAN DEFAULT FALSE,
	WATERMARKCOLUMNNAME VARCHAR(100) DEFAULT '2',
	WATERMARKDATATYPE VARCHAR(100),
	WATERMARKLASTVALUE VARCHAR(100) DEFAULT '1',
	LASTSTAGEDATETIME TIMESTAMP_LTZ(9),
	LASTLOADDATETIME TIMESTAMP_LTZ(9),
	CREATEDUSERID VARCHAR(50) NOT NULL DEFAULT CURRENT_USER(),
	CREATEDDATETIME TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	LASTUPDATEDUSERID VARCHAR(50) NOT NULL DEFAULT CURRENT_USER(),
	LASTUPDATEDDATETIME TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	ODS_PK VARCHAR(200),
	NRTFLAG BOOLEAN DEFAULT FALSE,
	ISRESTRICTED BOOLEAN,
	RESTRICTEDCOLUMNNAME VARCHAR(100),
	RESTRICTEDTABLENAME VARCHAR(100),
	SOURCE_SQL VARCHAR(4000),
	EXPRESSIONS VARCHAR(4000),
	RESTRICTEDTABLE_RANK NUMBER(38,0),
	ORPHANDELETE_EXPRESSIONS VARCHAR(16777216),
	ISORPHANDELETE BOOLEAN,
	CONSTRAINT PK_LOADPROCESS PRIMARY KEY (SOURCESYSTEMID, SOURCESCHEMANAME, SOURCETABLENAME)
);
CREATE OR REPLACE TABLE DW.CONTROL.LOGGING (
	LOGGING_ID NUMBER(38,0) NOT NULL,
	PROCESS_TYPE VARCHAR(100) NOT NULL,
	PROCESS_ID NUMBER(38,0),
	OBJECT_NAME VARCHAR(255),
	COMMAND VARCHAR(16777216) NOT NULL,
	RUN_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL,
	RUN_RESULT VARCHAR(100) NOT NULL,
	RECORDS_INSERTED NUMBER(38,0),
	RECORDS_UPDATED NUMBER(38,0),
	RECORDS_DELETED NUMBER(38,0),
	SRC_SYSTEM_ID NUMBER(38,0) NOT NULL,
	DW_SRC_SYSTEM_ID NUMBER(38,0),
	DW_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	DW_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP()
);
CREATE OR REPLACE TABLE DW.CONTROL.PROCESS (
	PROCESS_ID NUMBER(38,0) NOT NULL,
	TABLE_CATALOG VARCHAR(200) NOT NULL,
	PROCESS_TYPE VARCHAR(100) NOT NULL,
	PROCESS_ORDER NUMBER(38,0) NOT NULL,
	LAST_RUN_TIMESTAMP TIMESTAMP_LTZ(9),
	NOTES VARCHAR(16777216),
	COMMAND VARCHAR(16777216),
	DW_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	DW_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP()
);
CREATE OR REPLACE TABLE DW.CONTROL.SOURCESYSTEM (
	SOURCESYSTEMID NUMBER(38,0) NOT NULL,
	SOURCESYSTEMNAME VARCHAR(100) NOT NULL,
	SOURCEHOSTNAME VARCHAR(100),
	SOURCEDATABASENAME VARCHAR(100),
	SOURCEPORTNUMBER VARCHAR(10),
	SOURCECONNECTIONSTRING VARCHAR(100),
	SOURCEUSERID VARCHAR(50),
	SOURCEPASSWORD VARCHAR(50),
	SOURCECATALOGQUERY VARCHAR(1000),
	SOURCETIMEZONE VARCHAR(30),
	STAGEDATABASENAME VARCHAR(100),
	ODSDATABASENAME VARCHAR(100),
	ACTIVEFLAG BOOLEAN,
	CREATEDUSERID VARCHAR(50) NOT NULL DEFAULT CURRENT_USER(),
	CREATEDDATETIME TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	LASTUPDATEDUSERID VARCHAR(50) NOT NULL DEFAULT CURRENT_USER(),
	LASTUPDATEDDATETIME TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	DBMS VARCHAR(100),
	BACKUPSCHEMANAME VARCHAR(100),
	CONSTRAINT PK_SOURCESYSTEM PRIMARY KEY (SOURCESYSTEMID)
);

CREATE OR REPLACE SECURE VIEW SOURCESYSTEM_LOADPROCESS3 AS 
WITH PSEUDONYMISEDCOLUMNLISTEXP AS 
  (
	SELECT A.SOURCESYSTEMID,A.SOURCESYSTEMNAME,NVL(A.COLUMN_LIST||','||B.COLUMN_LIST_EXP,A.COLUMN_LIST) COLUMNLISTEXP,A.STAGEDATABASENAME,A.STAGETABLENAME FROM   
     (
     SELECT C.SOURCESYSTEMID,S.SOURCESYSTEMNAME,C.STAGEDATABASENAME,C.STAGETABLENAME,
    LISTAGG( NVL(EXPRESSIONS,'') || '  "' ||(STAGETABLECOLUMN) ||'" AS ' ||UPPER(STAGETABLECOLUMN), ',') 
        WITHIN GROUP (ORDER BY (C.STAGETABLENAME)) AS COLUMN_LIST
    FROM "DW"."CONTROL"."COLUMNDETAILS" C, "DW"."CONTROL"."SOURCESYSTEM" S WHERE 
    C.ACTIVEFLAG = 'TRUE' 
    AND NVL(ISPSEUDONYMISED,'FALSE')  = 'FALSE'
    AND C.SOURCESYSTEMID=S.SOURCESYSTEMID
   -- AND SOURCESYSTEMID=3 
    GROUP BY C.SOURCESYSTEMID,S.SOURCESYSTEMNAME,C.STAGEDATABASENAME,C.STAGETABLENAME) A 
    LEFT OUTER JOIN 
     (SELECT C.SOURCESYSTEMID,S.SOURCESYSTEMNAME,C.STAGEDATABASENAME,C.STAGETABLENAME,
    LISTAGG( NVL('ENCRYPT("'||C.STAGETABLECOLUMN||'",'||KS.PASSPHRASE||','''||KS.KEY_VALUE||''','''||KS.ADVANCED_ENCRYPTION_STD||''')','') || ' ' ||UPPER(C.STAGETABLECOLUMN), '  ,') 
        WITHIN GROUP (ORDER BY (C.STAGETABLENAME)) AS COLUMN_LIST_EXP
    FROM "DW"."CONTROL"."COLUMNDETAILS" C, "DW"."CONTROL"."KEYSTORE" KS, "DW"."CONTROL"."SOURCESYSTEM" S WHERE 
    C.ACTIVEFLAG = 'TRUE'
    AND C.ISPSEUDONYMISED  = 'TRUE' AND C.SOURCESYSTEMID=S.SOURCESYSTEMID AND S.SOURCESYSTEMNAME=KS.SOURCESYSTEM
    --AND C.SOURCESYSTEMID=3
    AND ARRAYS_OVERLAP(ARRAY_CONSTRUCT(C.SOURCESYSTEMID),KS.SOURCESYSTEMID) =TRUE
    AND TABLE_CATALOG=S.ODSDATABASENAME
    GROUP BY C.SOURCESYSTEMID,S.SOURCESYSTEMNAME,C.STAGEDATABASENAME,C.STAGETABLENAME) B
    ON A.STAGETABLENAME =B.STAGETABLENAME
    AND A.SOURCESYSTEMID = B.SOURCESYSTEMID
    AND A.SOURCESYSTEMNAME= B.SOURCESYSTEMNAME
	)
SELECT SOURCESYSTEMID,SOURCESYSTEMNAME,DBMS,SOURCEHOSTNAME,SOURCEPORTNUMBER,SOURCEUSERID,SOURCEPASSWORD,SOURCEDATABASENAME,
SOURCETIMEZONE,SOURCEJDBCDRIVER,SOURCECONNECTIONSTRING,SOURCECURRENTTIMESTAMP,STAGEDATABASENAME,ODSDATABASENAME,SOURCESYSTEM_ACTIVEFLAG,
SOURCESCHEMANAME,SOURCETABLENAME,SOURCECATALOGQUERY,STAGESCHEMANAME,STAGETABLENAME,ODSSCHEMANAME,ODSTABLENAME,STAGETYPE,LOADTYPE,LOADPROCESS_ACTIVEFLAG,
LOADPROCESS_NRTFLAG,WATERMARKCOLUMNNAME,WATERMARKDATATYPE,WATERMARKVALUE,ODS_PK,BACKUPSCHEMANAME,COLUMNLISTEXP,
ISRESTRICTED,RESTRICTEDTABLENAME,RESTRICTEDCOLUMNNAME,SOURCE_SQL,EXPRESSIONS,RESTRICTEDTABLE_RANK,ORPHANDELETE_EXPRESSIONS,ISORPHANDELETE
 FROM (SELECT 
SS.SOURCESYSTEMID,
SS.SOURCESYSTEMNAME,
SS.DBMS,
SS.SOURCEHOSTNAME,
SS.SOURCEPORTNUMBER,
SS.SOURCEUSERID,
SS.SOURCEPASSWORD,
SS.SOURCEDATABASENAME,
SS.SOURCETIMEZONE,
--SS.SOURCECATALOGQUERY,
CASE 
	--WHEN DBMS='SQL SERVER' THEN 'MICROSOFT SQL SERVER'
	WHEN SS.DBMS='SQL SERVER'	THEN 'SQL SERVER (MICROSOFT DRIVER)'
	WHEN SS.DBMS='MYSQL' 		THEN 'MYSQL'
	WHEN SS.DBMS='ORACLE' 		THEN 'ORACLE'
END AS SOURCEJDBCDRIVER,
CASE 
	WHEN SS.DBMS='SQL SERVER' 	THEN 'JDBC:SQLSERVER://'||SS.SOURCEHOSTNAME||'\\'||SS.SOURCEDATABASENAME||':'||SS.SOURCEPORTNUMBER
	WHEN SS.DBMS='MYSQL' 		THEN 'JDBC:MYSQL://'||SS.SOURCEHOSTNAME||':'||SS.SOURCEPORTNUMBER||'/'||SS.SOURCEDATABASENAME
	WHEN SS.DBMS='ORACLE' 		THEN 'JDBC:ORACLE:THIN:@'||SS.SOURCEHOSTNAME||':'||SS.SOURCEPORTNUMBER||':'||SS.SOURCEDATABASENAME
END AS SOURCECONNECTIONSTRING,
CASE 
	WHEN SS.DBMS='SQL SERVER' THEN 'SELECT CONVERT(VARCHAR, CURRENT_TIMESTAMP,120) TS;'
	WHEN SS.DBMS='MYSQL' THEN 'SELECT DATE_FORMAT(CURRENT_TIMESTAMP, ''%Y-%M-%D %H:%I:%S'') TS;'
	WHEN SS.DBMS='ORACLE' THEN 'SELECT TO_CHAR(CURRENT_TIMESTAMP,''YYYY-MM-DD HH24:MI:SS'') TS FROM DUAL;'
END AS SOURCECURRENTTIMESTAMP,
SS.STAGEDATABASENAME,
SS.ODSDATABASENAME,
SS.ACTIVEFLAG AS SOURCESYSTEM_ACTIVEFLAG,
LP.SOURCESCHEMANAME,
LP.SOURCETABLENAME,
CASE 
	WHEN DBMS='SQL SERVER' THEN 'SELECT S.NAME AS TABLE_SCHEMA, O.NAME AS TABLE_NAME FROM SYS.ALL_OBJECTS O INNER JOIN SYS.SCHEMAS S ON O.SCHEMA_ID=S.SCHEMA_ID WHERE S.NAME = '''||LP.SOURCESCHEMANAME||''' AND O.TYPE IN (''U'');'
	WHEN DBMS='MYSQL' THEN 'SELECT O.TABLE_SCHEMA, O.TABLE_NAME FROM INFORMATION_SCHEMA.TABLES O WHERE O.TABLE_SCHEMA='''||LP.SOURCESCHEMANAME||''';'
	WHEN DBMS='ORACLE' THEN 'SELECT O.OWNER AS TABLE_SCHEMA, O.OBJECT_NAME AS TABLE_NAME FROM SYS.ALL_OBJECTS O WHERE O.OBJECT_TYPE = ''TABLE'' AND O.OWNER='''||LP.SOURCESCHEMANAME||''';'
END AS SOURCECATALOGQUERY,
LP.STAGESCHEMANAME,
LP.STAGETABLENAME,
LP.ODSSCHEMANAME,
LP.ODSTABLENAME,
LP.STAGETYPE,
LP.LOADTYPE,
LP.ACTIVEFLAG AS LOADPROCESS_ACTIVEFLAG,
LP.NRTFLAG AS LOADPROCESS_NRTFLAG,
LP.WATERMARKCOLUMNNAME,
LP.WATERMARKDATATYPE,
--LP.WATERMARKLASTVALUE,
CASE 
	WHEN UPPER(SS.DBMS)='ORACLE' AND UPPER(LP.STAGETYPE) = 'INCREMENTAL' AND UPPER(LP.WATERMARKDATATYPE) ='TIMESTAMP' THEN 'TO_TIMESTAMP('||LP.WATERMARKLASTVALUE||', \'YYYY-MM-DD HH24:MI:SS\')' 
	ELSE LP.WATERMARKLASTVALUE 
END AS WATERMARKVALUE,
LP.ODS_PK,
SS.BACKUPSCHEMANAME,
PCL.COLUMNLISTEXP,
LP.ISRESTRICTED,
LP.RESTRICTEDTABLENAME,
LP.RESTRICTEDCOLUMNNAME,
LP.SOURCE_SQL,
LP.EXPRESSIONS,
LP.RESTRICTEDTABLE_RANK,
LP.ORPHANDELETE_EXPRESSIONS,
LP.ISORPHANDELETE
FROM DW.CONTROL.SOURCESYSTEM SS
LEFT OUTER JOIN CONTROL.LOADPROCESS LP ON SS.SOURCESYSTEMID=LP.SOURCESYSTEMID
LEFT OUTER JOIN  PSEUDONYMISEDCOLUMNLISTEXP PCL
ON SS.SOURCESYSTEMID=PCL.SOURCESYSTEMID
AND SS.STAGEDATABASENAME=PCL.STAGEDATABASENAME
AND LP.STAGETABLENAME=PCL.STAGETABLENAME
      ) T	
GROUP BY SOURCESYSTEMID,SOURCESYSTEMNAME,DBMS,SOURCEHOSTNAME,SOURCEPORTNUMBER,SOURCEUSERID,SOURCEPASSWORD,SOURCEDATABASENAME,
SOURCETIMEZONE,SOURCEJDBCDRIVER,SOURCECONNECTIONSTRING,SOURCECURRENTTIMESTAMP,STAGEDATABASENAME,ODSDATABASENAME,SOURCESYSTEM_ACTIVEFLAG,
SOURCESCHEMANAME,SOURCETABLENAME,SOURCECATALOGQUERY,STAGESCHEMANAME,STAGETABLENAME,ODSSCHEMANAME,ODSTABLENAME,STAGETYPE,LOADTYPE,LOADPROCESS_ACTIVEFLAG,
LOADPROCESS_NRTFLAG,WATERMARKCOLUMNNAME,WATERMARKDATATYPE,WATERMARKVALUE,ODS_PK,BACKUPSCHEMANAME,COLUMNLISTEXP,
ISRESTRICTED,RESTRICTEDTABLENAME,RESTRICTEDCOLUMNNAME,SOURCE_SQL,EXPRESSIONS,RESTRICTEDTABLE_RANK,ORPHANDELETE_EXPRESSIONS,ISORPHANDELETE
;
ALTER VIEW SOURCESYSTEM_LOADPROCESS3 SET SECURE;
CREATE OR REPLACE PROCEDURE "APPLY_MASKING"(MPNAME VARCHAR(16777216), TCATALOG VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
COMMENT='APPLIES A MASKING POLICY (PARAMETER 1) TO COLUMNS DEFINED IN DW.CONTROL.COLUMNDETAILS FOR A SPECIFIED TABLE_CATALOG (PARAMETER 2).'
EXECUTE AS OWNER
AS '
	FUNCTION LIST_APPLY() {
		VAR STMT = "SELECT ODSCOL.TABLE_CATALOG, ODSCOL.TABLE_SCHEMA, ODSCOL.TABLE_NAME, ODSCOL.COLUMN_NAME FROM DW.CONTROL.COLUMNDETAILS PSEUDO ";
        STMT += "INNER JOIN "+TCATALOG+".INFORMATION_SCHEMA.COLUMNS ODSCOL ";
        STMT += "ON UPPER(PSEUDO.ODSSCHEMANAME) = ODSCOL.TABLE_SCHEMA ";
        STMT += "AND UPPER(PSEUDO.ODSTABLENAME) = ODSCOL.TABLE_NAME ";
        STMT += "AND UPPER(PSEUDO.ODSTABLECOLUMN) = ODSCOL.COLUMN_NAME ";
        STMT += "WHERE PSEUDO.ACTIVEFLAG = TRUE AND ISPSEUDONYMISED=TRUE ";
        STMT += "ORDER BY ODSCOL.TABLE_NAME, ODSCOL.ORDINAL_POSITION";
        STMT += ";";
        VAR OBJ_RS = SNOWFLAKE.EXECUTE({SQLTEXT: STMT});
		WHILE(OBJ_RS.NEXT()) {
			TRY {
                SNOWFLAKE.EXECUTE({SQLTEXT: `ALTER TABLE IF EXISTS "`+ OBJ_RS.GETCOLUMNVALUE(1) + `"."` + OBJ_RS.GETCOLUMNVALUE(2) + `"."` + OBJ_RS.GETCOLUMNVALUE(3) +`" MODIFY COLUMN "` + OBJ_RS.GETCOLUMNVALUE(4) +`" SET MASKING POLICY "` + OBJ_RS.GETCOLUMNVALUE(1) + `"."` + OBJ_RS.GETCOLUMNVALUE(2) + `"."` + MPNAME + `";` });
//--            SNOWFLAKE.EXECUTE({SQLTEXT: `ALTER USER IF EXISTS "` + OBJ_RS.GETCOLUMNVALUE(1) + `" SET DISABLED=TRUE;` });
            }
            CATCH (ERR) {
                RESULT = ''FAILED ON : '' + + OBJ_RS.GETCOLUMNVALUE(1) + `"."` + OBJ_RS.GETCOLUMNVALUE(2) + `"."` + OBJ_RS.GETCOLUMNVALUE(3) +'' COLUMN:  ''+ OBJ_RS.GETCOLUMNVALUE(4) + '' '';
                RESULT += ''FAILED: CODE: '' + ERR.CODE + ''\\N STATE: '' + ERR.STATE;
		        RESULT += ''\\N MESSAGE: '' + ERR.MESSAGE;
		        RESULT += ''\\NSTACK TRACE:\\N'' + ERR.STACKTRACETXT;            
            }
        }
	}// — — — — — — — — — — — — — — — — — — — — — — — —
	VAR RESULT = ''SUCCESS'';
	TRY {
		LIST_APPLY(MPNAME, TCATALOG);
	} 
	CATCH (ERR) {
		RESULT = ''FAILED: CODE: '' + ERR.CODE + ''\\N STATE: '' + ERR.STATE;
		RESULT += ''\\N MESSAGE: '' + ERR.MESSAGE;
		RESULT += ''\\NSTACK TRACE:\\N'' + ERR.STACKTRACETXT;
	}
	RETURN RESULT;
';
CREATE OR REPLACE PROCEDURE "DROP_MASKING"(TCATALOG VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
COMMENT='REMOVES ANY MASKING POLICY FROM COLUMNS DEFINED IN DW.CONTROL.COLUMNDETAILS FOR A SPECIFIED TABLE_CATALOG (PARAMETER 1).'
EXECUTE AS OWNER
AS '
	FUNCTION LIST_APPLY() {
		VAR STMT = "SELECT ODSCOL.TABLE_CATALOG, ODSCOL.TABLE_SCHEMA, ODSCOL.TABLE_NAME, ODSCOL.COLUMN_NAME FROM DW.CONTROL.COLUMNDETAILS PSEUDO ";
        STMT += "INNER JOIN "+TCATALOG+".INFORMATION_SCHEMA.COLUMNS ODSCOL ";
        STMT += "ON UPPER(PSEUDO.ODSSCHEMANAME) = ODSCOL.TABLE_SCHEMA ";
        STMT += "AND UPPER(PSEUDO.ODSTABLENAME) = ODSCOL.TABLE_NAME ";
        STMT += "AND UPPER(PSEUDO.ODSTABLECOLUMN) = ODSCOL.COLUMN_NAME ";
        STMT += "WHERE PSEUDO.ACTIVEFLAG = TRUE AND ISPSEUDONYMISED=TRUE ";
        STMT += "ORDER BY ODSCOL.TABLE_NAME, ODSCOL.ORDINAL_POSITION";
        STMT += ";";
        VAR OBJ_RS = SNOWFLAKE.EXECUTE({SQLTEXT: STMT});
		WHILE(OBJ_RS.NEXT()) {
			TRY {
                SNOWFLAKE.EXECUTE({SQLTEXT: `ALTER TABLE IF EXISTS "`+ OBJ_RS.GETCOLUMNVALUE(1) + `"."` + OBJ_RS.GETCOLUMNVALUE(2) + `"."` + OBJ_RS.GETCOLUMNVALUE(3) +`" MODIFY COLUMN "` + OBJ_RS.GETCOLUMNVALUE(4) +`" UNSET MASKING POLICY ;` });
//--            SNOWFLAKE.EXECUTE({SQLTEXT: `ALTER USER IF EXISTS "` + OBJ_RS.GETCOLUMNVALUE(1) + `" SET DISABLED=TRUE;` });
            }
            CATCH (ERR) {
                RESULT = ''FAILED ON : '' + + OBJ_RS.GETCOLUMNVALUE(1) + `"."` + OBJ_RS.GETCOLUMNVALUE(2) + `"."` + OBJ_RS.GETCOLUMNVALUE(3) +'' COLUMN:  ''+ OBJ_RS.GETCOLUMNVALUE(4) + '' '';
                RESULT += ''FAILED: CODE: '' + ERR.CODE + ''\\N STATE: '' + ERR.STATE;
		        RESULT += ''\\N MESSAGE: '' + ERR.MESSAGE;
		        RESULT += ''\\NSTACK TRACE:\\N'' + ERR.STACKTRACETXT;            
            }
        }
	}// — — — — — — — — — — — — — — — — — — — — — — — —
	VAR RESULT = ''SUCCESS'';
	TRY {
		LIST_APPLY(TCATALOG);
	} 
	CATCH (ERR) {
		RESULT = ''FAILED: CODE: '' + ERR.CODE + ''\\N STATE: '' + ERR.STATE;
		RESULT += ''\\N MESSAGE: '' + ERR.MESSAGE;
		RESULT += ''\\NSTACK TRACE:\\N'' + ERR.STACKTRACETXT;
	}
	RETURN RESULT;
';
CREATE OR REPLACE SCHEMA DW.KEY;
USE SCHEMA DW.KEY;

CREATE OR REPLACE SEQUENCE SEQ_CLIENT_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE SEQUENCE SEQ_KEYMAP_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TABLE DW.KEY.CLIENT (
	KEYMAP_ID NUMBER(38,0) NOT NULL,
	COLUMN_VALUE_LIST ARRAY NOT NULL,
	CLIENT_ID NUMBER(38,0) NOT NULL,
	DW_SRC_SYSTEM_ID NUMBER(38,0) NOT NULL,
	DW_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	DW_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT PK_CLIENT PRIMARY KEY (KEYMAP_ID, COLUMN_VALUE_LIST)
);
CREATE OR REPLACE TABLE DW.KEY.KEYMAP (
	KEYMAP_ID NUMBER(38,0) NOT NULL DEFAULT DW.KEY.SEQ_KEYMAP_ID.NEXTVAL,
	COLUMN_NAME_LIST ARRAY NOT NULL,
	PARENT_KEYMAP_ID NUMBER(38,0),
	SRC_SYSTEM_ID NUMBER(38,0),
	TABLE_CATALOG VARCHAR(255),
	TABLE_SCHEMA VARCHAR(255),
	TABLE_NAME VARCHAR(255),
	KEY_PRECEDENCE NUMBER(38,0),
	DW_SEQUENCE_NAME VARCHAR(255) NOT NULL,
	DW_KEY_NAME VARCHAR(255) NOT NULL,
	DW_TABLE_NAME VARCHAR(255) NOT NULL,
	DW_COLUMN_NAME VARCHAR(255) NOT NULL,
	NOTES VARCHAR(1000),
	FILTER_CRITERIA VARCHAR(16777216),
	DW_SRC_SYSTEM_ID NUMBER(38,0),
	DW_CREATEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_CREATEDBY_TIMESTAMP TIMESTAMP_LTZ(9) DEFAULT CURRENT_TIMESTAMP(),
	DW_MODIFIEDBY VARCHAR(255) NOT NULL DEFAULT CURRENT_USER(),
	DW_MODIFIEDBY_TIMESTAMP TIMESTAMP_LTZ(9) DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT PK_KEYMAP PRIMARY KEY (KEYMAP_ID, COLUMN_NAME_LIST)
);